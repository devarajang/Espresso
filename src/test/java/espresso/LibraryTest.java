/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package espresso;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;

public class LibraryTest {

	public static void main(String[] args) throws Exception {
//		short messageLength = 2698; // 1
//		byte[] lengthBytes = ByteBuffer.allocate(2).putShort(messageLength).array();
//		StringBuilder sb = new StringBuilder();
//		sb.append((char)lengthBytes[0]);
//		sb.append((char)lengthBytes[1]);
//
//        //String s = new String(lengthBytes, CharsetUtil.US_ASCII);
//        System.out.println("Length of message " + sb);
//        
//        ByteBuffer wrapped = ByteBuffer.wrap(lengthBytes);
//        System.out.println(wrapped.getShort());
		String key = "7CC9674BF7DB96B05876092973A2FA2FD";
		byte[] byteArray = hexStringToByteArray(key);
		
		byte [] keyBytes = new byte[24];
		for(int i =0; i < byteArray.length;++i) {
			keyBytes[i] = byteArray[i];
		}
		for(int i =0; i < 8;++i) {
			keyBytes[16+i] = byteArray[i];
		}
		byte[] kcv = new byte[8];
		
		byte[] enc = encrypt(keyBytes, kcv);
		
		System.out.println(bytesToHex(enc).substring(0,4));
	}
	
	private static final char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();
	public static String bytesToHex(byte[] bytes) {
	    char[] hexChars = new char[bytes.length * 2];
	    for (int j = 0; j < bytes.length; j++) {
	        int v = bytes[j] & 0xFF;
	        hexChars[j * 2] = HEX_ARRAY[v >>> 4];
	        hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
	    }
	    return new String(hexChars);
	}
	

	private static byte[] hexStringToByteArray(String key) {
		
		byte[] b = new byte[key.length()/2];
		int ind = 0;
		for(int i=0 ; i<key.length()/2; ++i) {
			b[i] = (byte) ((Character.digit(key.charAt(ind), 16) << 4)
                    + Character.digit(key.charAt(ind+1), 16));
			ind +=2;
		}
		return b;
	}
	
	public static  byte[] encrypt(byte[] keyBytes,byte [] plainTextBytes) throws Exception {

		 DESedeKeySpec keySpec = new DESedeKeySpec(keyBytes);
		    SecretKeyFactory keyfactory = SecretKeyFactory.getInstance("DESede");
		    SecretKey ky = keyfactory.generateSecret(keySpec);

		    Cipher cipher = Cipher.getInstance("DESede/ECB/PKCS5Padding");
		    cipher.init(Cipher.ENCRYPT_MODE, ky);
		    return cipher.doFinal(plainTextBytes);
    }
}
